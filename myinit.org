#+STARTUP: overview

* repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
  
* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* Ace windows 
  For easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      ))
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )
   
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))

  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    ;(global-set-key "\C-s" 'swiper)
    ;(global-set-key (kbd "C-c C-r") 'ivy-resume)
    ;(global-set-key (kbd "<f6>") 'ivy-resume)
    ;(global-set-key (kbd "M-x") 'counsel-M-x)
    ;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
    ;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
    ;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    ;(global-set-key (kbd "<f1> l") 'counsel-load-library)
    ;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    ;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    ;(global-set-key (kbd "C-c g") 'counsel-git)
    ;(global-set-key (kbd "C-c j") 'counsel-git-grep)
    ;(global-set-key (kbd "C-c k") 'counsel-ag)
    ;(global-set-key (kbd "C-x l") 'counsel-locate)
    ;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+END_SRC

* Themes and modeline
  #+BEGIN_SRC emacs-lisp

  (use-package color-theme
    :ensure t)
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
  #+END_SRC
